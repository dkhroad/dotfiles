" vim: nowrap fdm=marker
scriptencoding utf-8

if !has('nvim')
  unlet! skip_defaults_vim
  set runtimepath+=~/.vim,~/.vim/after
  set packpath+=~/.vim
endif


source ~/dotfiles/dotvim/packages.vim

set nocompatible              " be iMproved, required
filetype off                  " required


" let g:mapleader=','


" Plugin configuration {{{1

" vim-gutentags {{{2
  let g:gutentags_cache_dir= '~/.tags_cache'

" Colorscheme {{{2 
if has('nvim')
  set termguicolors
endif
set background=dark
" set background=light
"colorscheme vividchalk
"colorscheme cobalt
colorscheme solarized8_dark
" colorscheme railscasts

" Terminal mode config {{{2
if has('nvim') 
  tnoremap <A-[> <Esc>
  tnoremap <expr> <A-r> '<C-\><C-n>"'.nr2char(getchar()).'pi'
  tnoremap <a-h> <c-\><c-n><c-w>h
  tnoremap <a-j> <c-\><c-n><c-w>j
  tnoremap <a-k> <c-\><c-n><c-w>k
  tnoremap <a-l> <c-\><c-n><c-w>
endif

" Files & buffers {{{2
map <leader>b :Buffers<CR>
map <leader>f :Files<CR>

" vimtest {{{2
:let test#strategy='vtr'
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>a :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>g :TestVisit<CR>

" netrw.vim {{{2
let g:netrw_banner=0
let g:netrw_liststyle = 3
" let g:netrw_browse_split = 4
" let g:netrw_altv = 1
" let g:netrw_winsize = 25
" augroup ProjectDrawer 
"   autocmd!
"   autocmd VimEnter * :Vexplore
" augroup END
" Don't show undo files in the explorer
" let g:netrw_list_hide='\.un\~$''

" Deoplete {{{2
let g:deoplete#enable_at_startup = 1
" use tab for completion
inoremap <expr><tab> pumvisible() ? "\<C-n>" : "\<tab>"



" Solarized8 {{{2
nnoremap  <leader>B :<c-u>exe "colors" (g:colors_name =~# "dark"
      \ ? substitute(g:colors_name, 'dark', 'light', '')
      \ : substitute(g:colors_name, 'light', 'dark', '')
      \ )<cr>

function! Solarized8Contrast(delta)
  let l:schemes = map(['_low', '_flat', '', '_high'], '"solarized8_".(&background).v:val')
  exe 'colors' l:schemes[((a:delta+index(l:schemes, g:colors_name)) % 4 + 4) % 4]
endfunction

nmap <leader>- :<c-u>call Solarized8Contrast(-v:count1)<cr>
nmap <leader>+ :<c-u>call Solarized8Contrast(+v:count1)<cr>



" NERDTree
map <leader>nt :NERDTreeToggle<cr>
let vim_markdown_preview_toggle=1 "display images
let vim_markdown_preview_github=1 "use grip 
let vim_markdown_preview_hotkey='<leader>`'

" CtrlP {{{2
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_prompt_mappings = {
    \ 'PrtSelectMove("j")':   ['<c-j>', '<c-n>'],
    \ 'PrtSelectMove("k")':   ['<c-k>', '<c-p>'],
    \ 'PrtHistory(-1)':       ['<down>'],
    \ 'PrtHistory(1)':        ['<up>'],
    \ }
let g:ctrlp_match_window = 'results:100'
if executable('ag')
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" The Silver Searcher {{{2
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

endif




map <leader>A :Ag!<space>
map <leader>a :Ag! <C-R><C-W><CR>

" Use ag for search, it's much faster than ack.
" See https://github.com/ggreer/the_silver_searcher
" on mac: brew install the_silver_searcher
let g:ag_prg = 'ag --nogroup --nocolor --column --smart-case'
let g:ag_working_path_mode="r"




syntax on                         " Turn on syntax highlighing.
filetype plugin indent on         " Turn on file type detection.

runtime macros/matchit.vim        " Load the matchit plugin.
set clipboard+=unnamed
set t_Co=256                      " 256 color support

set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.

set backspace=indent,eol,start    " Intuitive backspacing.

set hidden                        " Handle multiple buffers better.

set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest         " Complete files like a shell.

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

set number                        " Show line numbers.
set ruler                         " Show cursor position.

set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.

set wrap                          " Turn on line wrapping.
set scrolloff=3                   " Show 3 lines of context around the cursor.

set title                         " Set the terminal's title

set visualbell                    " No beeping.

set nobackup                      " Don't make a backup before overwriting a file.
set nowritebackup                 " And again.
set noswapfile                    " No swap files please

set tabstop=2                    " Global tab width.
set shiftwidth=2                 " And again, related.
set expandtab                    " Use spaces instead of tabs

set laststatus=2                  " Show the status line all the time

set cursorline 
set cursorcolumn
set title

"""""""""""""""""""""""""""""""""""""""""""""""""""
" Tab mappings
""""""""""""""""""""""""""""""""""""""""""""""""""
 map <leader>tt :tabnew<cr>
 map <leader>te :tabedit
 map <leader>tc :tabclose<cr>
 map <leader>to :tabonly<cr>
 map <leader>tn :tabnext<cr>
 map <leader>tp :tabprevious<cr>
 map <leader>tf :tabfirst<cr>
 map <leader>tl :tablast<cr>
 map <leader>tm :tabmove

map <CR> :noh<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Quit help easily
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! QuitWithQ()
  if &buftype == 'help'
    quit
  endif
endfunction
autocmd FileType help map <buffer> q :exe QuitWithQ()<cr>
autocmd FileType help map <buffer> <leader>w :exe QuitWithQ()<cr>

" Shortcut to mute highlighting
" nnoremap <silent> <C-l> :<C-u>nohlsearch<CR><C-l>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Persistent undo
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set undofile
set undodir=$HOME/.vim/undo

set undolevels=1000
set undoreload=10000


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Easy Window Navigation
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set global relativenumber
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd WinEnter * :setlocal relativenumber
autocmd WinLeave,FocusLost * :setlocal number
autocmd InsertEnter * :setlocal number
autocmd InsertLeave * :setlocal relativenumber

function! g:ToggleNuMode()
  if(&relativenumber == 1)
    " set number
    set nornu
  else
    set relativenumber
  endif
endfunc
set relativenumber "default line number mode

map <leader>ln :call g:ToggleNuMode()<CR>
nnoremap <leader><leader> <c-^>

inoremap <leader>e <Esc> 
" inoremap ;d <Esc>:update<Cr>
" inoremap ;f <C-O>:update<Cr>
" nnoremap ;f :update<CR>
" nnoremap ;d :update<CR>

"tslime 
let g:tslime_ensure_trailing_newlines = 1
let g:tslime_normal_mapping = '<localleader>t'
let g:tslime_visual_mapping = '<localleader>t'
let g:tslime_vars_mapping = '<localleader>T'

au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 | 
    \ set shiftwidth=4 |
    \ set textwidth=79 | 
    \ set expandtab | 
    \ set autoindent | 
    \ set fileformat=unix |

au BufNewFile,BufRead *.js,*.html,*.css
    \ set tabstop=2 | 
    \ set softtabstop=2 | 
    \ set shiftwidth=2 | 

"flag unnecessary white space
highlight BadWhitespace ctermbg=red guibg=darkred
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

" automatically rebalance windows on a vim resize
autocmd VimResized * :wincmd =

" zoom a vim pane, <C-w>= to rebalance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>


let g:VtrUseVtrMaps = 1

"Vim Tmux runner modifications for Python
let g:VtrStripLeadingWhitespace = 0
let g:VtrClearEmptyLines = 0
let g:VtrAppendNewline = 1

nnoremap <leader>irb :VtrOpenRunner {'orientation': 'v', 'percentage': 25, 'cmd': 'irb'}<cr>
nnoremap <leader>pyt :VtrOpenRunner {'orientation': 'v', 'percentage': 25, 'cmd': 'python'}<cr>
nnoremap <leader>ie :VtrOpenRunner {'orientation': 'v', 'percentage': 25, 'cmd': 'iex'}<cr>

set pastetoggle=<F5>

" vim-go
" write the contents of the file automatically when we call make
set autowrite
nnoremap <leader>c :cclose<CR>
nnoremap <leader>a <Plug>(go-coverage-toggle)
map <leader>k :GeDoc <C-R><C-W><CR>
autocmd FileType go nmap <leader>r <Plug>(go-run)
autocmd FileType go nmap <leader>t <Plug>(go-test)
autocmd FileType go nmap <leader>gi <Plug>(go-info)
" autocmd FileType go nmap <leader>d <Plug>(go-decls)
" run :GoBuild or :GoTest based on the go file
function! s:build_go_files() 
  let l:file = expand('%')
  if l:file =~# '^\f\+_test)\.go$'
    call go#test#Test(0,1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction
autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>

let g:go_list_type = "quickfix"
let g:go_highlight_types = 1
let g:go_highlight_field = 1
let g:go_highlight_functions =1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_build_constraints = 1
" let g:gometalinter_enabled = ['vet','golint','errcheck']
" let g:go_metalinter_autosave = 1
let g:go_metalinter_deadline = "5s"
let g:go_decls_include = "func,type"
let g:go_fmt_command = "goimports"
"let g:go_fmt_autosave = 0
let g:go_auto_type_info = 0
set updatetime=100
let g:go_gocode_unimported_packages = 1

" let g:go_auto_sameids = 1

autocmd Filetype go command! -bang A call go#alternate#Switch(<bang>0,'edit')
autocmd Filetype go command! -bang AV call go#alternate#Switch(<bang>0,'vsplit')
autocmd Filetype go command! -bang AS call go#alternate#Switch(<bang>0,'split')
autocmd Filetype go nmap <Leader>d <Plug>(go-describe)




" Enable omni completion.
" autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
" autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
" autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
" autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
" autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags


" switch on local spelling
autocmd BufRead,BufNewFile *.md setlocal spell spelllang=en_us
set complete+=kspell

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" LAST SECTION
" Include user's local vim config
" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif





