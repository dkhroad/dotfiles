" Example Vim configuration.
" Copy or symlink to ~/.vimrc or ~/_vimrc.

set background=dark
set nocompatible                  " Must come first because it changes other options.

silent! call pathogen#runtime_append_all_bundles()

syntax enable                     " Turn on syntax highlighting.
filetype plugin indent on         " Turn on file type detection.

runtime macros/matchit.vim        " Load the matchit plugin.

set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.

set backspace=indent,eol,start    " Intuitive backspacing.

set hidden                        " Handle multiple buffers better.

set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest         " Complete files like a shell.

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

set number                        " Show line numbers.
set ruler                         " Show cursor position.

set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.

set wrap                          " Turn on line wrapping.
set scrolloff=3                   " Show 3 lines of context around the cursor.

set title                         " Set the terminal's title

set visualbell                    " No beeping.

set nobackup                      " Don't make a backup before overwriting a file.
set nowritebackup                 " And again.
set noswapfile                    " No swap files please
"set directory=$HOME/.vim/tmp//,.  " Keep swap files in one location

" UNCOMMENT TO USE
set tabstop=4                    " Global tab width.
set shiftwidth=4                 " And again, related.
set expandtab                    " Use spaces instead of tabs

set laststatus=2                  " Show the status line all the time
" Useful status information at bottom of screen
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{fugitive#statusline()}%{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P

"colorscheme vividchalk
"colorscheme cobalt
"colorscheme solarized
colorscheme railscasts

" Tab mappings.
map <leader>tt :tabnew<cr>
map <leader>te :tabedit
map <leader>tc :tabclose<cr>
map <leader>to :tabonly<cr>
map <leader>tn :tabnext<cr>
map <leader>tp :tabprevious<cr>
map <leader>tf :tabfirst<cr>
map <leader>tl :tablast<cr>
map <leader>tm :tabmove

" NERDTree
map <leader><F2> :NERDTreeToggle<cr>
map <F2> :NERDTreeFocus<cr>

"Easy Window Navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Uncomment to use Jamis Buck's file opening plugin
"map <Leader>t :FuzzyFinderTextMate<Enter>

" Controversial...swap colon and semicolon for easier commands
"nnoremap ; :
"nnoremap : ;

"vnoremap ; :
"vnoremap : ;

"Sudo
cmap w!! w !sudo tee % > /dev/null

" Automatic fold settings for specific files. Uncomment to use.
autocmd FileType ruby setlocal foldmethod=syntax foldlevel=20 shiftwidth=4 tabstop=4
" autocmd FileType css  setlocal foldmethod=indent shiftwidth=2 tabstop=2

" For the MakeGreen plugin and Ruby RSpec. Uncomment to use.
autocmd BufNewFile,BufRead *_spec.rb compiler rspec

"Markdown to HTML
nmap <leader>md :!markup %

"RSpec
"
function! RSpecFile()
  execute("!clear && rspec " . expand("%p"))
endfunction
map <leader>R :call RSpecFile() <CR>
command! RSpecFile call RSpecFile()

function! RSpecCurrent()
  execute("!clear && rspec " . expand("%p") . ":" . line("."))
endfunction
map <leader>r :call RSpecCurrent() <CR>
command! RSpecCurrent call RSpecCurrent()

"Markdown to HTML
nmap <leader>md :%!~/bin/Markdown.pl --html4tags <cr>


"suppress lust warnings
let g:LustyExplorerSuppressRubyWarning = 1

"Don't break by default in php debugger
let g:dbgPavimBreakAtEntry = 0

"search all gems in curren RVM gemset
autocmd FileType ruby let &l:tags = pathogen#legacyjoin(pathogen#uniq(
      \ pathogen#split(&tags) +
      \ map(split($GEM_PATH,':'),'v:val."/gems/*/tags"')))

"Notes plugin 
:let g:notes_suffix = '.txt'
:let g:notes_directories = ['~/Documents/Notes']
:let g:notes_title_sync = 'rename_file'

"Ctrl-P plugin 
let g:ctrlp_clear_cache_on_exit = 0 "enable cross-session caching
let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_working_path_mode ='rc'

let g:ctrlp_extensions = ['tag', 'buffertag', 'quickfix', 'dir', 'rtscript',
                          \ 'undo', 'line', 'changes',  'bookmarkdir']
map <leader>pm :CtrlPMixed<CR>
map <leader>pr :CtrlPRoot
map <leader>pb :CtrlPBuffer<CR>
map <leader>pr :CtrlPMRU<CR>
map <leader>pp :CtrlP
map <leader>pccc :CtrlPClearCache<CR>
map <leader>pcca :CtrlPClearCache<CR>


let g:dbgPavimBreakAtEntry = 0

function! RunSpec(command)
  " TODO: handle args such as --tag focus here, or make a separate command for it
  if a:command == ''
    let dir = 'spec'
  else
    let dir = a:command
  endif
  cexpr system("bin/rspec -r ./spec/support/vim_formatter -f VimFormatter " . dir)
  cw
endfunction
command! -nargs=? -complete=file Spec call RunSpec(<q-args>)
map <leader>s :Spec<space>
