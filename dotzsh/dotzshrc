if [[ ! -d ~/.zplug ]];then 
  git clone https://github.com/zplug/zplug ~/.zplug
  source ~/.zplug/init.zsh && zplug update --self
fi
source ~/.zplug/init.zsh

zplug "mafredri/zsh-async", from:"github", use:"async.zsh"
zplug "sindresorhus/pure", use:"pure.zsh", from:"github", as:theme
zplug zsh-users/zsh-syntax-highlighting, nice:10
zplug zsh-users/zsh-completions, nice:10
zplug plugins/vi, from:oh-my-zsh
zplug plugins/git, from:oh-my-zsh
zplug plugins/z, from:oh-my-zsh
zplug lib/directories, from:oh-my-zsh
zplug plugins/pass, from:oh-my-zsh

# Install packages that have not been installed yet
if ! zplug check --verbose; then
  printf "Install? [y/N]: "
  if read -q; then
    echo; zplug install
  else
    echo
  fi
fi

# turn on git stash status
zstyle :prompt:pure:git:stash show yes
zplug load --verbose


setopt AUTO_CD
# Set to this to use case-sensitive completion
# CASE_SENSITIVE="true"

# Comment this out to disable weekly auto-update checks
# DISABLE_AUTO_UPDATE="true"

# Uncomment following line if you want to disable colors in ls
# DISABLE_LS_COLORS="true"

# Uncomment following line if you want to disable autosetting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment following line if you want red dots to be displayed while waiting for completion
# COMPLETION_WAITING_DOTS="true"


source $HOME/.bash_profile_includes/cdr.sh
#source $HOME/.bash_profile_includes/rvm.sh
# to load project specific rvm gemsets
# cd ..;1
source $HOME/.bash_profile_includes/vagrant.sh
source $HOME/.bash_profile_includes/vim.sh
# source $HOME/.bash_profile_includes/git.sh
source $HOME/.bash_profile_includes/docker.sh
source $HOME/.bash_profile_includes/go.sh
source $HOME/.bash_profile_includes/aws.sh
source $HOME/.bash_profile_includes/rbenv.sh
source $HOME/.bash_profile_includes/code.sh
source $HOME/.bash_profile_includes/nvm.sh
source $HOME/.bash_profile_includes/fzf.sh
source $HOME/.bash_profile_includes/ensure_tmux_is_running
# source $HOME/.bash_profile_includes/hyperledger.sh

ulimit -S -n 1024

export PASSWORD_STORE_ENABLE_EXTENSIONS=true

PATH=$HOME/bin:/usr/local/bin:$PATH
bindkey -v
zle -N edit-command-line


# VI MODE KEYBINDINGS (ins mode)
bindkey -M viins '^a'    beginning-of-line
bindkey -M viins '^e'    end-of-line
bindkey -M viins '^k'    kill-line
bindkey -M viins '^r'    history-incremental-pattern-search-backward
bindkey -M viins '^s'    history-incremental-pattern-search-forward
bindkey -M viins '^p'    up-line-or-history
bindkey -M viins '^n'    down-line-or-history
bindkey -M viins '^y'    yank
bindkey -M viins '^w'    backward-kill-word
bindkey -M viins '^u'    backward-kill-line
bindkey -M viins '^h'    backward-delete-char
bindkey -M viins '^?'    backward-delete-char
bindkey -M viins '^_'    undo
bindkey -M viins '^x^r'  redisplay
bindkey -M viins '\eOH'  beginning-of-line # Home
bindkey -M viins '\eOF'  end-of-line       # End
bindkey -M viins '\e[2~' overwrite-mode    # Insert
bindkey -M viins '^f'   forward-word      # Alt-f
bindkey -M viins '^b'   backward-word     # Alt-b
bindkey -M viins '^d'   kill-word         # Alt-d                    

# VI MODE KEYBINDINGS (cmd mode)
bindkey -M vicmd '^a'    beginning-of-line
bindkey -M vicmd '^e'    end-of-line
bindkey -M vicmd '^k'    kill-line
bindkey -M vicmd '^r'    history-incremental-pattern-search-backward
bindkey -M vicmd '^s'    history-incremental-pattern-search-forward
bindkey -M vicmd '^p'    up-line-or-history
bindkey -M vicmd '^n'    down-line-or-history
bindkey -M vicmd '^y'    yank
bindkey -M vicmd '^w'    backward-kill-word
bindkey -M vicmd '^u'    backward-kill-line
bindkey -M vicmd '/'     vi-history-search-forward
bindkey -M vicmd '?'     vi-history-search-backward
bindkey -M vicmd '^_'    undo
bindkey -M vicmd '^f'   forward-word                      # Alt-f
bindkey -M vicmd '^b'   backward-word                     # Alt-b
bindkey -M vicmd '^d'   kill-word                         # Alt-d
bindkey -M vicmd '\e[5~' history-beginning-search-backward # PageUp
bindkey -M vicmd '\e[6~' history-beginning-search-forward  # PageDown
bindkey -M vicmd  v edit-command-line

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/dkhroad/google-cloud-sdk/path.zsh.inc' ]; then source '/Users/dkhroad/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/dkhroad/google-cloud-sdk/completion.zsh.inc' ]; then source '/Users/dkhroad/google-cloud-sdk/completion.zsh.inc'; fi

# zprof
if [[ -n "$TMUX" ]]; then
  if [[ -n "$VIRTUAL_ENV" ]]; then
    tmux set-environment VIRTUAL_ENV $VIRTUAL_ENV
  fi
fi
if [[ -n "$VIRTUAL_ENV" ]]; then
  source $VIRTUAL_ENV/bin/activate
fi

export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
if [[ -f ~/.acme.sh ]]; then
  . "/Users/dkhroad/.acme.sh/acme.sh.env"
fi
